
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f7  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000571  00000000  00000000  0000078f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d5  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035d  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001289  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z14spi_slave_initv>:
{
	char flush_buffer;
	SPDR = data;
	while (!(SPSR & (1 << SPIF)))
	;
	flush_buffer = SPDR;
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8f 74       	andi	r24, 0x4F	; 79
  70:	87 bb       	out	0x17, r24	; 23
  72:	87 b3       	in	r24, 0x17	; 23
  74:	80 64       	ori	r24, 0x40	; 64
  76:	87 bb       	out	0x17, r24	; 23
  78:	80 e4       	ldi	r24, 0x40	; 64
  7a:	8d b9       	out	0x0d, r24	; 13
  7c:	08 95       	ret

0000007e <_Z10slave_readv>:
}

char slave_read()
{
	SPDR = 0xFF;
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)))
  82:	77 9b       	sbis	0x0e, 7	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <_Z10slave_readv+0x4>
	;
	return (SPDR);
  86:	8f b1       	in	r24, 0x0f	; 15
}
  88:	08 95       	ret

0000008a <main>:

int main(void)
{
	DDRC = 0xff;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	84 bb       	out	0x14, r24	; 20
	spi_slave_init();
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <_Z14spi_slave_initv>

	// char d = 0x2e;
	// PORTC = d;
	// slave_write(d);

	char d = slave_read();
  92:	0e 94 3f 00 	call	0x7e	; 0x7e <_Z10slave_readv>
	PORTC = d;
  96:	85 bb       	out	0x15, r24	; 21
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0xe>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
